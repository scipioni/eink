esphome:
  name: battery
  on_boot:
    then:
      - switch.turn_on: boot

switch:
  - platform: gpio
    pin: D8
    id: jetson_keep_on
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: gpio
    pin: D4
    id: led
    inverted: True
  - platform: template
    id: boot
    turn_on_action:
      - logger.log:
          format: "---- boot ----- pd is active=%d"
          args: ["id(pd_is_active).state"]
      - if:
          # se arriva tensione dal pd non accendo il jetson ma entro nello stato di carical'ho acceso tramite il pulsante quindi attivo il transistor che lo mantiene alimentato se rilascio il pulsante,
          condition:
            - binary_sensor.is_on: pd_is_active
          then:
            - switch.turn_on: turn_on_charge
          # altrimenti accendo il jetson
          else:
            - switch.turn_on: turn_on_jetson
  - platform: template
    id: turn_on_jetson
    turn_on_action:
      - logger.log: "turning on jetson"
      - display.page.show: page_jetson_splash
      - switch.turn_on: jetson_keep_on
      - delay: 2s
      - display.page.show: page_debug
    turn_off_action:
      - logger.log: "turning off jetson"
      - display.page.show: page_shutdown
      - delay: 2s
      - switch.turn_off: jetson_keep_on
      - display.page.show: page_charge

  - platform: template
    id: turn_on_charge
    turn_on_action:
      - logger.log: "turning on charge"
      - display.page.show: page_splash
      - switch.turn_off: jetson_keep_on
      - delay: 2s
      - display.page.show: page_charge

binary_sensor:
  - platform: gpio
    pin:
      number: D5
      mode:
        input: true
        pullup: false
    name: jetson is on
    id: pd_is_active

sensor:
  - platform: adc
    pin: A0
    id: adc_sensor
    name: "ADC"
    update_interval: 100ms
    filters:
      - multiply: 3.3
      - sliding_window_moving_average:
          window_size: 1
          send_every: 5
          send_first_at: 5 # accendiamo l'adc dopo 3 secondi
      # - median:
      #     window_size: 5
      #     send_every: 5
      #     send_first_at: 1
    on_value_range:
      - below: 0.5
        then:
          if:
            # se premo il pulsante quando il jetson Ã¨ acceso
            condition:
              #- binary_sensor.is_on: pd_is_active
              - switch.is_on: jetson_keep_on
            # allora lo spengo
            then:
              - switch.turn_off: turn_on_jetson
      - above: 2.0
        then:
          if:
            condition:
              - binary_sensor.is_on: pd_is_active
            then:
              - switch.turn_on: turn_on_jetson
    #     then:
    #       if:
    #         condition:
    #           - binary_sensor.is_off: jetson_is_powered
    #         then:
    #           - delay: 2s
    #           - display.page.show: page_jetson_splash
    #           - switch.turn_on: jetson_on
    #         else:
    #           - display.page.show: page_shutdown
    #           - delay: 2s
    #           - switch.turn_off: jetson_on
    #       # - lambda: |-
    #       #     if (id(uptime_seconds) <= 3)
    #       #       return;

    #       #     if (id(jetson_is_powered).state > 0) {
    #       #       id(oled).show_page(id(page_shutdown));
    #       #       id(oled).update();
    #       #       delay(2000);
    #       #       id(jetson_on).turn_off();
    #       #     } else {
    #       #       id(oled).show_page(id(page_jetson_splash));
    #       #       id(oled).update();
    #       #       delay(2000);
    #       #       id(jetson_on).turn_on();
    #       #     }

    # - above: 1.0
    #   then:
    #     - if:
    #         condition:
    #           - lambda: |-
    #               //return (id(status) <= 0); // se ho appena acceso o ero in carica
    #               return (id(jetson_is_powered).state > 0); // se ho acceso il jetson con il pulsante
    #         then:
    #           - lambda: |-
    #               id(status) = 1;
    #           - display.page.show: page_jetson_splash
    #           #- switch.turn_on: jetson_on
    #           - delay: 3s
    #           - display.page.show: page_debug
    #         else:
    #           - display.page.show: page_charge
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 15s
    id: sstrength
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s

display:
  - platform: ssd1306_i2c
    id: oled
    #model: "SSD1306 128x32"
    model: "SH1106 128x64"
    update_interval: 1s
    rotation: 180
    pages:
      - id: page_debug
        lambda: |-
          it.printf(0, 0, id(font_small), "ADC=%2.2f", id(adc_sensor).state);
          it.printf(0, 15, id(font_small), "JET=%d PD=%d", id(jetson_keep_on).state, id(pd_is_active).state);
          it.printf(0, 30, id(font_small), "uptime=%d", id(uptime_seconds));

      - id: page_splash
        lambda: |-
          it.print(64,32,id(font_big), TextAlign::CENTER, "RICARICA");
      - id: page_jetson_splash
        lambda: |-
          it.print(64,32,id(font_big), TextAlign::CENTER, "CERBERO");
      - id: page_shutdown
        lambda: |-
          it.print(64,32,id(font_big), TextAlign::CENTER, "OFF");

      - id: page_charge
        lambda: |-
          // batteria
          int x0 = 124; 
          int y0 = 32;
          it.rectangle(0, 0, x0, y0);
          it.filled_rectangle(3, 3, id(battery_level)*x0/100-2, y0-6);
          it.filled_rectangle(x0, 10, x0+1, 12);
          //it.printf(x0+3, 0, id(font_level), "%d%%", min(99,id(battery_level)));

          // autonomia
          //it.printf(64, y0+2, id(font_autonomy), TextAlign::CENTER_HORIZONTAL, "%d minuti %d", id(autonomy), id(pd_is_active).state);
          it.printf(0, y0+2, id(font_autonomy), "ADC %f", id(adc_sensor).state);

      # - id: page2
      #   lambda: |-
      #     int minutes = id(uptime_sensor).state/60;
      #     it.printf(64, 0, id(font_uptime), TextAlign::CENTER_HORIZONTAL, "acceso da");
      #     it.printf(64, 25, id(font_uptime), TextAlign::CENTER_HORIZONTAL, "%d minuti", minutes);
      #     //it.rectangle(0, 0, 128, 32);
      #     //it.rectangle(0, 0, 128, 16);
      #     //it.printf(1, 0, id(myfont), "Vcc=%2.3fV", id(vcc).state);
      #     //it.printf(0, 0, id(myfont), "spegnimento...");

interval:
  - interval: 2000ms
    then:
      - switch.turn_on: led
      - delay: 100ms
      - switch.turn_off: led
  # questa procedura serve solo a testare il grafico della batteria
  - interval: 1s
    then:
      - lambda: |-
          id(uptime_seconds) += 1;

          id(battery_level) += 10;
          if (id(battery_level) > 100) {
            id(battery_level) = 1;
            //id(oled).show_page(id(page2));
          }
  # - interval: 1s
  #   then:
  #     if:
  #       condition:
  #         - binary_sensor.is_on: pd_is_active
  #       then:
  #         - switch.turn_on: jetson_on
  #         - delay: 2s
  #         - display.page.show: page_debug
  #       else:
  #         - display.page.show: page_charge

  # # - interval: 3s
  # #   then:
  # #     - display.page.show_next: oled
  # #     - component.update: oled
  # - interval: 5s
  #   then:
  #     - lambda: |-
  #         id(autonomy) -= 1;
  #         if(id(autonomy) < 1) {
  #           id(autonomy) = 300;
  #         }

globals:
  - id: battery_level
    type: int
    restore_value: no
    initial_value: "100"
  - id: uptime_seconds
    type: int
    restore_value: no
    initial_value: "0"
  - id: autonomy
    type: int
    restore_value: no
    initial_value: "180"
  # - id: status
  #   type: int
  #   restore_value: no
  #   initial_value: '-1' # 0 charging and jetson off, 1 jetson on, -1 splash screen

esp8266:
  #board: esp01_1m
  board: d1_mini

i2c:
  sda: GPIO4
  scl: GPIO5
  frequency: 800kHz

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 0%
    blue: 0%
  - id: my_green
    red: 100%
    green: 0%
    blue: 100%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_cyan
    red: 0%
    green: 0%
    blue: 100%
  - id: my_magenta
    red: 0%
    green: 100%
    blue: 0%
  - id: my_white
    red: 0%
    green: 0%
    blue: 0%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: my_black
    red: 100%
    green: 100%
    blue: 100%

font:
  # - file: "fonts/Comic Sans MS.ttf"
  #   id: my_font
  #   size: 20

  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: myfont
    size: 18
  - file: "gfonts://Roboto"
    id: font_level
    size: 24
  - file: "gfonts://Roboto"
    id: font_autonomy
    size: 18
  - file: "gfonts://Roboto"
    id: font_uptime
    size: 20
  - file: "gfonts://Roboto"
    id: font_small
    size: 14
  - file: "gfonts://Roboto"
    id: font_big
    size: 18
# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""
  reboot_timeout: 0s

ota:
  password: ""

wifi:
  ssid: !secret WifiSsid
  password: !secret WifiPassword

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Cerbero Fallback Hotspot"
    password: !secret WifiPasswordHotspot
#captive_portal:

